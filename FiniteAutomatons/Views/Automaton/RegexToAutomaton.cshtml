@{
    ViewData["Title"] = "Regex to Automaton";
}

<div class="container mt-4">
    <h3>Build Automaton from Regular Expression</h3>
    <div class="card mt-3">
        <div class="card-body">
            <form id="regexForm" method="post" action="@Url.Action("BuildFromRegex", "Automaton")">
                @Html.AntiForgeryToken()
                <div class="mb-3">
                    <label for="regex" class="form-label">Regular expression</label>
                    <input type="text" id="regex" name="regex" class="form-control" placeholder="e.g. (a|b)*c" />
                    <div class="form-text">Supports | * + ? parentheses and character classes like [a-z]</div>
                </div>
                <button type="submit" id="buildBtn" class="btn btn-primary">Build and Load into Simulator</button>
            </form>

            <div id="result" class="mt-3" style="display:none;">
                <h5>Result</h5>
                <pre id="jsonResult" class="bg-light p-2"></pre>
            </div>

            <div id="error" class="alert alert-danger mt-3" style="display:none;"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Hijack form submit to get JSON response and redirect
        document.getElementById('regexForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            document.getElementById('error').style.display = 'none';
            document.getElementById('result').style.display = 'none';
            const form = e.target;
            const formData = new FormData(form);

            try {
                const resp = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        // let browser set Content-Type for URLSearchParams body
                        'Accept': 'application/json'
                    },
                    body: new URLSearchParams(formData)
                });

                // Try to parse JSON even on non-ok to show server error message
                let json = null;
                const text = await resp.text();
                try { json = JSON.parse(text); } catch (ex) { json = null; }

                if (!resp.ok) {
                    const message = (json && json.error) ? json.error : (text || resp.statusText);
                    document.getElementById('error').innerText = 'Server error: ' + message;
                    document.getElementById('error').style.display = 'block';
                    return;
                }

                if (!json) {
                    document.getElementById('error').innerText = 'Server returned unexpected response';
                    document.getElementById('error').style.display = 'block';
                    return;
                }

                if (!json.success) {
                    document.getElementById('error').innerText = json.error || 'Unknown error';
                    document.getElementById('error').style.display = 'block';
                    return;
                }

                // redirect to home where TempData contains the custom automaton
                window.location.href = json.redirect || '/';
            } catch (ex) {
                document.getElementById('error').innerText = 'Request failed: ' + (ex && ex.message ? ex.message : ex);
                document.getElementById('error').style.display = 'block';
            }
        });
    </script>
}
