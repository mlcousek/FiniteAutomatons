@using FiniteAutomatons.Core.Models.ViewModel
@model FiniteAutomatons.Core.Models.ViewModel.AutomatonViewModel
@{
    ViewData["Title"] = "Create Automaton";
}

<style>
    .badge-epsilon { background-color:#6c757d !important; color:#fff; }
    .field-error { color: #b02a37; font-size: 0.9rem; }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <h2><i class="fas fa-plus-circle"></i> Create Your Own Automaton</h2>
            
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <strong>Validation Errors:</strong>
                    <ul class="mb-0">
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }

            <div class="card mb-3">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="fas fa-cog"></i> Automaton Type</h5>
                </div>
                <div class="card-body">
                    <form asp-controller="Automaton" asp-action="ChangeAutomatonType" method="post" id="automatonTypeForm">
                        @for (int i = 0; i < Model.States.Count; i++)
                        {
                            <input type="hidden" name="States[@i].Id" value="@Model.States[i].Id" />
                            <input type="hidden" name="States[@i].IsStart" value="@Model.States[i].IsStart.ToString().ToLower()" />
                            <input type="hidden" name="States[@i].IsAccepting" value="@Model.States[i].IsAccepting.ToString().ToLower()" />
                        }
                        @for (int i = 0; i < Model.Transitions.Count; i++)
                        {
                            <input type="hidden" name="Transitions[@i].FromStateId" value="@Model.Transitions[i].FromStateId" />
                            <input type="hidden" name="Transitions[@i].ToStateId" value="@Model.Transitions[i].ToStateId" />
                            <input type="hidden" name="Transitions[@i].Symbol" value="@(Model.Transitions[i].Symbol == '\0' ? "ε" : Model.Transitions[i].Symbol.ToString())" />
                        }
                        @for (int i = 0; i < Model.Alphabet.Count; i++)
                        {
                            <input type="hidden" name="Alphabet[@i]" value="@Model.Alphabet[i]" />
                        }
                        <input type="hidden" name="IsCustomAutomaton" value="@Model.IsCustomAutomaton.ToString().ToLower()" />

                        <div class="mb-3">
                            <label for="newType" class="form-label">Select Automaton Type:</label>
                            @{
                                var dfaSelected = Model.Type == AutomatonType.DFA ? "selected" : "";
                                var nfaSelected = Model.Type == AutomatonType.NFA ? "selected" : "";
                                var epsilonNfaSelected = Model.Type == AutomatonType.EpsilonNFA ? "selected" : "";
                                var pdaSelected = Model.Type == AutomatonType.PDA ? "selected" : "";
                            }
                            <select name="newType" id="newType" class="form-control" onchange="changeAutomatonType()">
                                <option value="DFA" selected="@dfaSelected">DFA - Deterministic Finite Automaton</option>
                                <option value="NFA" selected="@nfaSelected">NFA - Nondeterministic Finite Automaton</option>
                                <option value="EpsilonNFA" selected="@epsilonNfaSelected">ε-NFA - Epsilon Nondeterministic Finite Automaton</option>
                                <option value="PDA" selected="@pdaSelected">PDA - Pushdown Automaton</option>
                            </select>
                        </div>
                        <small class="text-muted">Current: <strong>@Model.TypeDisplayName</strong></small>
                    </form>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="fas fa-circle"></i> Add State</h5>
                </div>
                <div class="card-body">
                    <form asp-controller="Automaton" asp-action="AddState" method="post">
                        @for (int i = 0; i < Model.States.Count; i++)
                        {
                            <input type="hidden" name="States[@i].Id" value="@Model.States[i].Id" />
                            <input type="hidden" name="States[@i].IsStart" value="@Model.States[i].IsStart.ToString().ToLower()" />
                            <input type="hidden" name="States[@i].IsAccepting" value="@Model.States[i].IsAccepting.ToString().ToLower()" />
                        }
                        
                        @for (int i = 0; i < Model.Transitions.Count; i++)
                        {
                            <input type="hidden" name="Transitions[@i].FromStateId" value="@Model.Transitions[i].FromStateId" />
                            <input type="hidden" name="Transitions[@i].ToStateId" value="@Model.Transitions[i].ToStateId" />
                            <input type="hidden" name="Transitions[@i].Symbol" value="@(Model.Transitions[i].Symbol == '\0' ? "ε" : Model.Transitions[i].Symbol.ToString())" />
                        }
                        
                        @for (int i = 0; i < Model.Alphabet.Count; i++)
                        {
                            <input type="hidden" name="Alphabet[@i]" value="@Model.Alphabet[i]" />
                        }
                        
                        <input type="hidden" name="Type" value="@Model.Type" />
                        <input type="hidden" name="IsCustomAutomaton" value="@Model.IsCustomAutomaton.ToString().ToLower()" />
                        
                        <div class="row">
                            <div class="col-md-4">
                                <label for="stateId" class="form-label">State ID:</label>
                                <input type="number" name="stateId" class="form-control" required min="0" />
                            </div>
                            <div class="col-md-4">
                                <div class="form-check mt-4">
                                    <input type="checkbox" name="isStart" value="true" class="form-check-input" id="isStart" />
                                    <input type="hidden" name="isStart" value="false" />
                                    <label class="form-check-label" for="isStart">Start State</label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-check mt-4">
                                    <input type="checkbox" name="isAccepting" value="true" class="form-check-input" id="isAccepting" />
                                    <input type="hidden" name="isAccepting" value="false" />
                                    <label class="form-check-label" for="isAccepting">Accepting State</label>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">
                            <i class="fas fa-plus"></i> Add State
                        </button>
                    </form>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="fas fa-arrow-right"></i> Add Transition</h5>
                </div>
                <div class="card-body">
                    <form id="addTransitionForm" asp-controller="Automaton" asp-action="AddTransition" method="post">
                        @for (int i = 0; i < Model.States.Count; i++)
                        {
                            <input type="hidden" name="States[@i].Id" value="@Model.States[i].Id" />
                            <input type="hidden" name="States[@i].IsStart" value="@Model.States[i].IsStart.ToString().ToLower()" />
                            <input type="hidden" name="States[@i].IsAccepting" value="@Model.States[i].IsAccepting.ToString().ToLower()" />
                        }
                        @for (int i = 0; i < Model.Transitions.Count; i++)
                        {
                            <input type="hidden" name="Transitions[@i].FromStateId" value="@Model.Transitions[i].FromStateId" />
                            <input type="hidden" name="Transitions[@i].ToStateId" value="@Model.Transitions[i].ToStateId" />
                            <input type="hidden" name="Transitions[@i].Symbol" value="@(Model.Transitions[i].Symbol == '\0' ? "ε" : Model.Transitions[i].Symbol.ToString())" />
                        }
                        @for (int i = 0; i < Model.Alphabet.Count; i++)
                        {
                            <input type="hidden" name="Alphabet[@i]" value="@Model.Alphabet[i]" />
                        }
                        <input type="hidden" name="Type" value="@Model.Type" />
                        <input type="hidden" name="IsCustomAutomaton" value="@Model.IsCustomAutomaton.ToString().ToLower()" />
                        
                        <div class="row">
                            <div class="col-md-3">
                                <label for="fromStateId" class="form-label">From State:</label>
                                <select name="fromStateId" class="form-control" required>
                                    <option value="">Select...</option>
                                    @foreach (var id in Model.States.Select(state => state.Id))
                                    {
                                        <option value="@id">State @id</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="toStateId" class="form-label">To State:</label>
                                <select name="toStateId" class="form-control" required>
                                    <option value="">Select...</option>
                                    @foreach (var id in Model.States.Select(state => state.Id))
                                    {
                                        <option value="@id">State @id</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="symbol" class="form-label">
                                    Symbol:
                                </label>
                                <div class="input-group">
                                    <input type="text" name="symbol" maxlength="@(Model.SupportsEpsilonTransitions ? "7" : "1")" 
                                           class="form-control" required 
                                           placeholder="@(Model.SupportsEpsilonTransitions ? "a or ε" : "e.g., a")" 
                                           id="symbolInput" />
                                    @if (Model.SupportsEpsilonTransitions)
                                    {
                                        <button type="button" class="btn btn-outline-secondary" onclick="insertEpsilon()" title="Insert epsilon symbol">
                                            ε
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="col-md-3">
                                @* PDA-specific stack pop/push inputs *@
                                <div id="pdaStackFields" style="display:@(Model.Type == AutomatonType.PDA ? "block" : "none");">
                                    <div class="row">
                                        <div class="col-12">
                                            <label class="form-label">Stack pop (optional for PDA):</label>
                                            <input type="text" name="newTransitionStackPop" class="form-control" placeholder="e.g., ( or ε" value="@Model.NewTransitionStackPop" />
                                            <div id="stackPopError" class="field-error" role="alert" aria-live="polite" style="display:none;"></div>
                                        </div>
                                        <div class="col-12 mt-2">
                                            <label class="form-label">Stack push (optional for PDA):</label>
                                            <input type="text" name="newTransitionStackPush" class="form-control" placeholder="e.g., ( or (X" value="@Model.NewTransitionStackPush" />
                                            <div id="stackPushError" class="field-error" role="alert" aria-live="polite" style="display:none;"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <button type="submit" class="btn btn-success mt-4">
                                    <i class="fas fa-plus"></i> Add Transition
                                </button>
                            </div>
                        </div>
                        @if (Model.SupportsEpsilonTransitions)
                        {
                            <small class="text-info mt-2 d-block">
                                <i class="fas fa-info-circle"></i>
                                For epsilon transitions, enter "ε", "epsilon", "eps", or leave empty.
                            </small>
                        }
                    </form>
                </div>
            </div>

            <div class="card">
                <div class="card-header bg-warning">
                    <h5 class="mb-0"><i class="fas fa-check"></i> Finalize Automaton</h5>
                </div>
                <div class="card-body">
                    <form asp-controller="Automaton" asp-action="CreateAutomaton" method="post">
                        @for (int i = 0; i < Model.States.Count; i++)
                        {
                            <input type="hidden" name="States[@i].Id" value="@Model.States[i].Id" />
                            <input type="hidden" name="States[@i].IsStart" value="@Model.States[i].IsStart.ToString().ToLower()" />
                            <input type="hidden" name="States[@i].IsAccepting" value="@Model.States[i].IsAccepting.ToString().ToLower()" />
                        }
                        @for (int i = 0; i < Model.Transitions.Count; i++)
                        {
                            <input type="hidden" name="Transitions[@i].FromStateId" value="@Model.Transitions[i].FromStateId" />
                            <input type="hidden" name="Transitions[@i].ToStateId" value="@Model.Transitions[i].ToStateId" />
                            <input type="hidden" name="Transitions[@i].Symbol" value="@(Model.Transitions[i].Symbol == '\0' ? "ε" : Model.Transitions[i].Symbol.ToString())" />
                        }
                        @for (int i = 0; i < Model.Alphabet.Count; i++)
                        {
                            <input type="hidden" name="Alphabet[@i]" value="@Model.Alphabet[i]" />
                        }
                        <input type="hidden" name="Type" value="@Model.Type" />
                        <input type="hidden" name="IsCustomAutomaton" value="@Model.IsCustomAutomaton.ToString().ToLower()" />
                        
                        <button type="submit" class="btn btn-warning btn-lg me-2">
                            <i class="fas fa-play"></i> Create & Simulate Automaton
                        </button>
                        <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-cogs"></i> Use Default Automaton
                        </a>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="fas fa-eye"></i> Automaton Preview</h5>
                    <small>@Model.TypeDisplayName</small>
                </div>
                <div class="card-body">
                    @if (Model.States.Any())
                    {
                        <h6><i class="fas fa-circle"></i> States (@Model.States.Count):</h6>
                        <div class="row">
                            @foreach (var state in Model.States)
                            {
                                <div class="col-md-6 mb-2">
                                    <div class="card @(state.IsStart ? "border-primary" : "") @(state.IsAccepting ? "border-success" : "")">
                                        <div class="card-body p-2">
                                            <strong>State @state.Id</strong>
                                            @if (state.IsStart) { <span class="badge bg-primary">Start</span> }
                                            @if (state.IsAccepting) { <span class="badge bg-success">Accept</span> }
                                            <form asp-controller="Automaton" asp-action="RemoveState" method="post" class="d-inline">
                                                @for (int i = 0; i < Model.States.Count; i++)
                                                {
                                                    <input type="hidden" name="States[@i].Id" value="@Model.States[i].Id" />
                                                    <input type="hidden" name="States[@i].IsStart" value="@Model.States[i].IsStart.ToString().ToLower()" />
                                                    <input type="hidden" name="States[@i].IsAccepting" value="@Model.States[i].IsAccepting.ToString().ToLower()" />
                                                }
                                                @for (int i = 0; i < Model.Transitions.Count; i++)
                                                {
                                                    <input type="hidden" name="Transitions[@i].FromStateId" value="@Model.Transitions[i].FromStateId" />
                                                    <input type="hidden" name="Transitions[@i].ToStateId" value="@Model.Transitions[i].ToStateId" />
                                                    <input type="hidden" name="Transitions[@i].Symbol" value="@(Model.Transitions[i].Symbol == '\0' ? "ε" : Model.Transitions[i].Symbol.ToString())" />
                                                }
                                                @for (int i = 0; i < Model.Alphabet.Count; i++)
                                                {
                                                    <input type="hidden" name="Alphabet[@i]" value="@Model.Alphabet[i]" />
                                                }
                                                <input type="hidden" name="Type" value="@Model.Type" />
                                                <input type="hidden" name="IsCustomAutomaton" value="@Model.IsCustomAutomaton.ToString().ToLower()" />
                                                <input type="hidden" name="stateId" value="@state.Id" />
                                                <button type="submit" class="btn btn-sm btn-outline-danger float-end" title="Remove State">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @if (Model.Transitions.Any())
                        {
                            <h6 class="mt-3"><i class="fas fa-arrow-right"></i> Transitions (@Model.Transitions.Count):</h6>
                            <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>From</th>
                                            <th>Symbol</th>
                                            <th>To</th>
                                            <th width="10%">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var transition in Model.Transitions)
                                        {
                                            <tr>
                                                <td><strong>@transition.FromStateId</strong></td>
                                                <td>
                                                    <code class="text-primary">
                                                        @(transition.Symbol == '\0' ? "ε" : transition.Symbol.ToString())
                                                    </code>
                                                </td>
                                                <td><strong>@transition.ToStateId</strong></td>
                                                <td>
                                                    <form asp-controller="Automaton" asp-action="RemoveTransition" method="post" class="d-inline">
                                                        @for (int i = 0; i < Model.States.Count; i++)
                                                        {
                                                            <input type="hidden" name="States[@i].Id" value="@Model.States[i].Id" />
                                                            <input type="hidden" name="States[@i].IsStart" value="@Model.States[i].IsStart.ToString().ToLower()" />
                                                            <input type="hidden" name="States[@i].IsAccepting" value="@Model.States[i].IsAccepting.ToString().ToLower()" />
                                                        }
                                                        @for (int i = 0; i < Model.Transitions.Count; i++)
                                                        {
                                                            <input type="hidden" name="Transitions[@i].FromStateId" value="@Model.Transitions[i].FromStateId" />
                                                            <input type="hidden" name="Transitions[@i].ToStateId" value="@Model.Transitions[i].ToStateId" />
                                                            <input type="hidden" name="Transitions[@i].Symbol" value="@(Model.Transitions[i].Symbol == '\0' ? "ε" : Model.Transitions[i].Symbol.ToString())" />
                                                        }
                                                        @for (int i = 0; i < Model.Alphabet.Count; i++)
                                                        {
                                                            <input type="hidden" name="Alphabet[@i]" value="@Model.Alphabet[i]" />
                                                        }
                                                        <input type="hidden" name="Type" value="@Model.Type" />
                                                        <input type="hidden" name="IsCustomAutomaton" value="@Model.IsCustomAutomaton.ToString().ToLower()" />
                                                        <input type="hidden" name="fromStateId" value="@transition.FromStateId" />
                                                        <input type="hidden" name="toStateId" value="@transition.ToStateId" />
                                                        <input type="hidden" name="symbol" value="@(transition.Symbol == '\0' ? "ε" : transition.Symbol.ToString())" />
                                                        <button type="submit" class="btn btn-sm btn-outline-danger" title="Remove Transition">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </form>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        @if (Model.Alphabet.Any())
                        {
                            <h6 class="mt-3"><i class="fas fa-font"></i> Alphabet:</h6>
                            <p>
                                @foreach (var symbol in Model.Alphabet)
                                {
                                    <span class="badge bg-info me-1 mb-1">@symbol</span>
                                }
                                @if (Model.SupportsEpsilonTransitions && Model.Transitions.Any(t => t.Symbol == '\0'))
                                {
                                    <span class="badge badge-epsilon me-1 mb-1">ε</span>
                                }
                            </p>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted p-4">
                            <i class="fas fa-info-circle fa-3x mb-3"></i>
                            <p>No states added yet.</p>
                            <p>Start by selecting an automaton type and adding states and transitions.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function changeAutomatonType() {
            const form = document.getElementById('automatonTypeForm');
            if (form) {
                form.submit();
            }
        }

        function insertEpsilon() {
            const symbolInput = document.getElementById('symbolInput');
            if (symbolInput) {
                symbolInput.value = 'ε';
                symbolInput.focus();
            }
        }

        function updatePDAFieldsVisibility() {
            // Determine current type: prefer the newType selector if present (it posts back), otherwise fall back to hidden Type input in transition form
            const typeSelect = document.getElementById('newType');
            let currentType = null;
            if (typeSelect) currentType = typeSelect.value;
            if (!currentType) {
                const hiddenType = document.querySelector('form[action$="AddTransition"] input[name="Type"]') || document.querySelector('input[name="Type"]');
                if (hiddenType) currentType = hiddenType.value;
            }

            const pdaFields = document.getElementById('pdaStackFields');
            if (!pdaFields) return;
            if (currentType === 'PDA') {
                pdaFields.style.display = 'block';
            } else {
                pdaFields.style.display = 'none';
            }
        }

        function isEpsilonToken(val) {
            if (!val) return false;
            const t = val.trim().toLowerCase();
            return t === 'ε' || t === 'eps' || t === 'epsilon' || t === '\\0' || t === '\0' || t === 'e';
        }

        function validateAddTransitionForm(e) {
            const pdaFields = document.getElementById('pdaStackFields');
            if (!pdaFields || pdaFields.style.display === 'none') return true; // nothing to validate

            const popInput = document.querySelector('input[name="newTransitionStackPop"]');
            const pushInput = document.querySelector('input[name="newTransitionStackPush"]');
            const popVal = popInput ? popInput.value.trim() : '';
            const pushVal = pushInput ? pushInput.value.trim() : '';

            let valid = true;
            const popErr = document.getElementById('stackPopError');
            const pushErr = document.getElementById('stackPushError');
            popErr.style.display = 'none'; popErr.textContent = '';
            pushErr.style.display = 'none'; pushErr.textContent = '';

            // Validate stack pop: empty or epsilon token or single char
            if (popVal.length > 0) {
                if (isEpsilonToken(popVal)) {
                    // ok
                } else if (popVal.length === 1) {
                    // ok
                } else {
                    popErr.textContent = 'Stack pop must be a single character or epsilon (ε).';
                    popErr.style.display = 'block';
                    valid = false;
                }
            }

            // Validate stack push: empty or 1-5 characters (no whitespace)
            if (pushVal.length > 0) {
                if (pushVal.length > 5) {
                    pushErr.textContent = 'Stack push must be at most 5 characters.';
                    pushErr.style.display = 'block';
                    valid = false;
                } else if (/\s/.test(pushVal)) {
                    pushErr.textContent = 'Stack push cannot contain whitespace.';
                    pushErr.style.display = 'block';
                    valid = false;
                }
            }

            if (!valid) {
                e.preventDefault();
                return false;
            }

            return true;
        }

        document.addEventListener('DOMContentLoaded', function () {
            updatePDAFieldsVisibility();
            const typeSelect = document.getElementById('newType');
            if (typeSelect) {
                typeSelect.addEventListener('change', updatePDAFieldsVisibility);
            }

            const addForm = document.getElementById('addTransitionForm');
            if (addForm) {
                addForm.addEventListener('submit', validateAddTransitionForm);
            }
        });
    </script>
}